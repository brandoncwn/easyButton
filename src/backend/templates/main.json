{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1272.37030",
      "templateHash": "11981101088601813818"
    }
  },
  "parameters": {
    "projectName": {
      "type": "string"
    },
    "repositoryToken": {
      "type": "string"
    },
    "repositoryUrl": {
      "type": "string"
    },
    "formrecName": {
      "type": "string",
      "defaultValue": "[parameters('projectName')]"
    },
    "location": {
      "type": "string",
      "defaultValue": "[parameters('primaryRegion')]"
    },
    "branch": {
      "type": "string",
      "defaultValue": "main"
    },
    "cosmosDbName": {
      "type": "string",
      "defaultValue": "[parameters('projectName')]"
    },
    "cosmosContainerName": {
      "type": "string",
      "defaultValue": "[parameters('projectName')]"
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[parameters('projectName')]"
    },
    "cosmosdbAccountName": {
      "type": "string",
      "defaultValue": "[parameters('projectName')]"
    },
    "hostingPlanName": {
      "type": "string",
      "defaultValue": "[parameters('projectName')]"
    },
    "functionAppName": {
      "type": "string",
      "defaultValue": "[parameters('projectName')]"
    },
    "functionAppNamePython": {
      "type": "string",
      "defaultValue": "[format('huggingface{0}', parameters('projectName'))]"
    },
    "applicationInsightsName": {
      "type": "string",
      "defaultValue": "[format('appinsights{0}', parameters('projectName'))]"
    },
    "cogServicesName": {
      "type": "string",
      "defaultValue": "[format('cogservices{0}', parameters('projectName'))]"
    },
    "languageServicesName": {
      "type": "string",
      "defaultValue": "[format('language{0}', parameters('projectName'))]"
    },
    "webAppName": {
      "type": "string",
      "defaultValue": "[toLower(format('webapp{0}', parameters('projectName')))]"
    },
    "accountName": {
      "type": "string",
      "defaultValue": "[parameters('projectName')]"
    },
    "databaseName": {
      "type": "string",
      "defaultValue": "[parameters('cosmosDbName')]"
    },
    "containerName": {
      "type": "string",
      "defaultValue": "[parameters('cosmosContainerName')]"
    },
    "primaryRegion": {
      "type": "string",
      "defaultValue": "[parameters('location')]"
    },
    "languageServicesLocation": {
      "type": "string",
      "defaultValue": "westus2"
    },
    "environmentType": {
      "type": "string",
      "defaultValue": "nonprod",
      "allowedValues": [
        "nonprod",
        "prod"
      ]
    },
    "defaultConsistencyLevel": {
      "type": "string",
      "defaultValue": "Session",
      "allowedValues": [
        "Eventual",
        "ConsistentPrefix",
        "Session",
        "BoundedStaleness",
        "Strong"
      ],
      "metadata": {
        "description": "The default consistency level of the Cosmos DB account."
      }
    },
    "maxStalenessPrefix": {
      "type": "int",
      "defaultValue": 100000,
      "maxValue": 2147483647,
      "minValue": 10,
      "metadata": {
        "description": "Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 1000000. Multi Region: 100000 to 1000000."
      }
    },
    "maxIntervalInSeconds": {
      "type": "int",
      "defaultValue": 300,
      "maxValue": 86400,
      "minValue": 5,
      "metadata": {
        "description": "Max lag time (minutes). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400."
      }
    },
    "automaticFailover": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable automatic failover for regions"
      }
    },
    "autoscaleMaxThroughput": {
      "type": "int",
      "defaultValue": 4000,
      "maxValue": 1000000,
      "minValue": 4000,
      "metadata": {
        "description": "Maximum throughput for the container"
      }
    }
  },
  "variables": {
    "formrecDefaultVNetName": "frCSDefaultVNet9901",
    "formrecDefaultSubnetName": "frCSDefaultSubnet9901",
    "formrecDefaultAddressPrefix": "13.41.6.0/26",
    "formrecLocation": "eastus",
    "formrecSku": "S0",
    "formrecTagValues": {},
    "formrecVnet": {},
    "formrecIpRules": [],
    "formrecVirtualNetworkType": "None",
    "formrecIdentity": {
      "type": "None"
    },
    "formrecPrivateEndpoints": [],
    "formrecIsCommitmentPlanForDisconnectedContainerEnabled": false,
    "formrecCommitmentPlanForDisconnectedContainer": {
      "current": {},
      "hostingModel": "DisconnectedContainer",
      "planType": "CustomInvoice",
      "autoRenew": true
    },
    "storageAccountSkuName": "[if(equals(parameters('environmentType'), 'prod'), 'Standard_GRS', 'Standard_LRS')]",
    "accountName_var": "[toLower(parameters('accountName'))]",
    "consistencyPolicy": {
      "Eventual": {
        "defaultConsistencyLevel": "Eventual"
      },
      "ConsistentPrefix": {
        "defaultConsistencyLevel": "ConsistentPrefix"
      },
      "Session": {
        "defaultConsistencyLevel": "Session"
      },
      "BoundedStaleness": {
        "defaultConsistencyLevel": "BoundedStaleness",
        "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
        "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
      },
      "Strong": {
        "defaultConsistencyLevel": "Strong"
      }
    },
    "locations": [
      {
        "locationName": "[parameters('primaryRegion')]",
        "failoverPriority": 0,
        "isZoneRedundant": false
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "name": "deployVnet",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-04-01",
              "name": "[if(equals(variables('formrecVirtualNetworkType'), 'External'), variables('formrecVnet')[copyIndex()].name, variables('formrecDefaultVNetName'))]",
              "location": "[variables('formrecLocation')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": "[if(equals(variables('formrecVirtualNetworkType'), 'External'), variables('formrecVnet')[copyIndex()].addressPrefixes, json(concat('[{\"', variables('formrecDefaultAddressPrefix'),'\"}]')))]"
                },
                "subnets": [
                  {
                    "name": "[if(equals(variables('formrecVirtualNetworkType'), 'External'), variables('formrecVnet')[copyIndex()].subnets.subnet.name, variables('formrecDefaultSubnetName'))]",
                    "properties": {
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.CognitiveServices",
                          "locations": [
                            "[variables('formrecLocation')]"
                          ]
                        }
                      ],
                      "addressPrefix": "[if(equals(variables('formrecVirtualNetworkType'), 'External'), variables('formrecVnet')[copyIndex()].subnets.subnet.addressPrefix, variables('formrecDefaultAddressPrefix'))]"
                    }
                  }
                ]
              }
            }
          ]
        },
        "parameters": {}
      },
      "condition": "[and(and(not(empty(variables('formrecVnet'))), equals(variables('formrecVnet')[copyIndex()].newOrExisting, 'new')), equals(variables('formrecVirtualNetworkType'), 'External'))]"
    },
    {
      "apiVersion": "2021-04-30",
      "name": "[parameters('formrecName')]",
      "location": "[variables('formrecLocation')]",
      "type": "Microsoft.CognitiveServices/accounts",
      "kind": "FormRecognizer",
      "tags": "[if(contains(variables('formrecTagValues'), 'Microsoft.CognitiveServices/accounts'), variables('formrecTagValues')['Microsoft.CognitiveServices/accounts'], json('{}'))]",
      "sku": {
        "name": "[variables('formrecSku')]"
      },
      "identity": "[variables('formrecIdentity')]",
      "properties": {
        "customSubDomainName": "[toLower(parameters('formrecName'))]",
        "publicNetworkAccess": "[if(equals(variables('formrecVirtualNetworkType'), 'Internal'), 'Disabled', 'Enabled')]",
        "networkAcls": {
          "defaultAction": "[if(equals(variables('formrecVirtualNetworkType'), 'External'), 'Deny', 'Allow')]",
          "virtualNetworkRules": "[if(equals(variables('formrecVirtualNetworkType'), 'External'), json(concat('[{\"id\": \"', concat(subscription().id, '/resourceGroups/', variables('formrecVnet')[copyIndex()].resourceGroup, '/providers/Microsoft.Network/virtualNetworks/', variables('formrecVnet')[copyIndex()].name, '/subnets/', variables('formrecVnet')[copyIndex()].subnets.subnet.name), '\"}]')), json('[]'))]",
          "ipRules": "[if(or(empty(variables('formrecIpRules')), empty(variables('formrecIpRules')[0].value)), json('[]'), variables('formrecIpRules'))]"
        }
      },
      "resources": [
        {
          "type": "commitmentPlans",
          "apiVersion": "2021-10-01",
          "name": "DisconnectedContainer-FormRecognizer-1",
          "properties": "[variables('formrecCommitmentPlanForDisconnectedContainer')]",
          "condition": "[variables('formrecIsCommitmentPlanForDisconnectedContainerEnabled')]",
          "dependsOn": [
            "[parameters('formrecName')]"
          ]
        }
      ],

      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'deployVnet')]"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "[concat('deployPrivateEndpoint-', variables('formrecPrivateEndpoints')[copyIndex()].privateEndpoint.name)]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('formrecPrivateEndpoints')[copyIndex()].resourceGroup.value.name]",
      "subscriptionId": "[variables('formrecPrivateEndpoints')[copyIndex()].subscription.subscriptionId]",
      "dependsOn": [
        "[parameters('formrecName')]"
      ],
      "condition": "[equals(variables('formrecVirtualNetworkType'), 'Internal')]",
      "copy": {
        "name": "privateendpointscopy",
        "count": "[length(variables('formrecPrivateEndpoints'))]"
      },
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "location": "[variables('formrecLocation')]",
              "name": "[variables('formrecPrivateEndpoints')[copyIndex()].privateEndpoint.name]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-03-01",
              "properties": {
                "subnet": {
                  "id": "[variables('formrecPrivateEndpoints')[copyIndex()].privateEndpoint.properties.subnet.id]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('formrecPrivateEndpoints')[copyIndex()].privateEndpoint.name]",
                    "properties": {
                      "privateLinkServiceId": "[concat(resourceGroup().id, '/providers/Microsoft.CognitiveServices/accounts/', parameters('formrecName'))]",
                      "groupIds": "[variables('formrecPrivateEndpoints')[copyIndex()].privateEndpoint.properties.privateLinkServiceConnections[0].properties.groupIds]"
                    }
                  }
                ]
              },
              "tags": {}
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "[concat('deployDnsZoneGroup-', variables('formrecPrivateEndpoints')[copyIndex()].privateEndpoint.name)]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('formrecPrivateEndpoints')[copyIndex()].resourceGroup.value.name]",
      "subscriptionId": "[variables('formrecPrivateEndpoints')[copyIndex()].subscription.subscriptionId]",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', concat('deployPrivateEndpoint-', variables('formrecPrivateEndpoints')[copyIndex()].privateEndpoint.name))]"
      ],
      "condition": "[equals(variables('formrecVirtualNetworkType'), 'Internal')]",
      "copy": {
        "name": "privateendpointdnscopy",
        "count": "[length(variables('formrecPrivateEndpoints'))]"
      },
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-03-01",
              "name": "[concat(variables('formrecPrivateEndpoints')[copyIndex()].privateEndpoint.name, '/', 'default')]",
              "location": "[variables('formrecLocation')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink-cognitiveservices-azure-com",
                    "properties": {
                      "privateDnsZoneId": "[concat(resourceGroup().id, '/providers/Microsoft.Network/privateDnsZones/privatelink.cognitiveservices.azure.com')]"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    }
  ]
}